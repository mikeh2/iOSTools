

@interface NSMutableData (DESCCC)
- (BOOL) encryptWithKey: (NSString *) key;
@end

@implementation NSMutableData (DESCCC)
- (BOOL) encryptWithKey: (NSString *) key
{
   
   key  = @"spelldown 2009";
   
   // ‘key’ should be 32 bytes for AES256, will be null-padded otherwise
   
   /*
   char keyPtr[kCCKeySizeDES* 3002]; // room for terminator (unused)
   bzero( keyPtr, sizeof(keyPtr) ); // fill with zeroes (for padding)
                                    // fetch key data
   [key getCString: keyPtr 
         maxLength: sizeof(keyPtr) 
          encoding: NSUTF8StringEncoding];
   // encrypts in-place, since this is a mutable data object
   size_t numBytesEncrypted = 0;
   CCCryptorStatus result = CCCrypt(kCCEncrypt,
                                    kCCAlgorithmDES,
                                    kCCOptionPKCS7Padding,
                                    keyPtr, 
                                    kCCKeySizeDES,
                                    NULL // initialization vector (optional) ,
                                    [self mutableBytes], [self length], // input 
                                    [self mutableBytes], [self length], // output 
                                    &numBytesEncrypted );
   
   */
   
   
   //const void *vplainText;
   //size_t plainTextBufferSize;
   
  // plainTextBufferSize = [token length];
  //vplainText = (const void *) [token UTF8String];
   
   //CCCryptorStatus ccStatus;
   CCCryptorStatus result;
   //uint8_t *bufferPtr = NULL;
   //size_t bufferPtrSize = 0;
   size_t movedBytes;
   //size_t numBytesEncrypted = 0;
   
   //bufferPtrSize = (plainTextBufferSize + kCCBlockSize3DES) & ~(kCCBlockSize3DES - 1);
   ///bufferPtr = malloc( bufferPtrSize * sizeof(uint8_t));
   //memset((void *)bufferPtr, 0x0, bufferPtrSize);
   // memset((void *) iv, 0x0, (size_t) sizeof(iv));
   
   
   //NSString *initVec = @"init Vec";
   const void *vkey = (const void *) [key UTF8String];
   //const void *vinitVec = (const void *) [initVec UTF8String];
   
   result = CCCrypt(kCCEncrypt,
                      kCCAlgorithmDES,
                      kCCOptionECBMode,
                      // vkey, //"123456789012345678901234", //key
                     vkey,
                      kCCKeySizeDES,
                      NULL,// vinitVec, //"init Vec", //iv,
                      [self mutableBytes], [self length], /* input */
                      [self mutableBytes], [self length], /* output */
                      &movedBytes);
   
   NSLog(@"%d", result);
   
   switch (result) {
      case kCCParamError:
         NSLog(@"PARAM");
         break;
      case kCCBufferTooSmall:
          NSLog(@"TOO SMALL");
         break;
      case kCCMemoryFailure:
         NSLog(@"MEM");

         break;
      case kCCAlignmentError:
         NSLog(@"ALIGN");

         break;
      case kCCDecodeError:
         NSLog(@"DECODER");

         break;
      case kCCUnimplemented:
         NSLog(@"UNIM");

         break;
         
      case kCCSuccess:
         NSLog(@"success");
      default:
         break;
   }
   
   
   
   return ( result == kCCSuccess );
}
- (BOOL) decryptWithKey: (NSString *) key
{
   // ‘key’ should be 32 bytes for AES256, will be null-padded otherwise
   char keyPtr[kCCKeySizeDES+1]; // room for terminator (unused)
   bzero( keyPtr, sizeof(keyPtr) ); // fill with zeroes (for padding)
                                    // fetch key data
   [key getCString: keyPtr maxLength: sizeof(keyPtr) encoding: NSUTF8StringEncoding];
   // encrypts in-place, since this is a mutable data object
   size_t numBytesEncrypted = 0;
   CCCryptorStatus result = CCCrypt( kCCDecrypt,
                                    kCCAlgorithmDES, 
                                    kCCOptionPKCS7Padding,
                                    keyPtr, kCCKeySizeDES,
                                    NULL /* initialization vector (optional) */,
                                    [self mutableBytes], [self length], /* input */
                                    [self mutableBytes], [self length], /* output */
                                    &numBytesEncrypted );
   return ( result == kCCSuccess );
}